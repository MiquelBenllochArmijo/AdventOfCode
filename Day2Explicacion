Justificación del uso de programación dinámica:

    La programación dinámica (PD) es útil para resolver este problema porque implica determinar la "seguridad"
de reportes que cumplen condiciones específicas a partir de sus subreportes. Muchas comparaciones y verificaciones 
se repiten al evaluar sublistas o segmentos, lo que genera redundancia si se resuelve mediante una solución directa. 
Con PD, podemos descomponer el problema en subproblemas más pequeños, almacenando sus resultados intermedios para evitar cálculos redundantes.


Descripción técnica del enfoque:

1. Representación del problema
  El problema consiste en verificar si un reporte (una lista de niveles) es seguro bajo las siguientes condiciones:
    1.	Los niveles deben ser completamente crecientes o decrecientes.
    2.	Las diferencias entre niveles consecutivos deben estar entre 111 y 333.
  Cada reporte se evalúa como una secuencia de transiciones válida desde el primer nivel hasta el último. 
  Usamos una tabla de programación dinámica para almacenar si un nivel cumple con las condiciones de seguridad.
________________________________________
2. Tabla de programación dinámica
  La matriz dp se define como:
    •	dp[i][0]: Verdadero si el subreporte hasta el índice i es seguro como secuencia decreciente.
    •	dp[i][1]: Verdadero si el subreporte hasta el índice i es seguro como secuencia creciente.

3. Inicialización
  Para el índice i=0i = 0i=0, el reporte es seguro por definición:
    •	dp[0][0] = true (decreciente)
    •	dp[0][1] = true (creciente)

4. Llenado de la tabla
  Para cada nivel iii (desde 1 hasta n−1n-1n−1), verificamos si es posible continuar una secuencia 
  creciente o decreciente desde cualquier nivel anterior j (donde 0≤j<i0 \leq j < i0≤j<i).
  Esto se realiza mediante la función auxiliar is_valid_transition, que comprueba:
    •	Si la diferencia entre niveles está entre 111 y 333.
    •	Si la dirección (creciente o decreciente) se mantiene.
  Para cada transición válida, actualizamos:
    •	dp[i][0]: Si hay una transición válida desde un segmento decreciente.
    •	dp[i][1]: Si hay una transición válida desde un segmento creciente.

5. Decisión final
  El reporte completo es seguro si:
    •	dp[n-1][0] es verdadero (es seguro como decreciente hasta el último nivel) o
    •	dp[n-1][1] es verdadero (es seguro como creciente hasta el último nivel).

________________________________________

Pasos detallados para resolver el problema

1.	Entrada y estructura de datos:
    o	Leer los reportes desde un archivo. Cada línea representa un reporte con niveles separados por espacios.
    o	Almacenamos los reportes en un vector de vectores para su procesamiento.
2.	Evaluar cada reporte:
    o	Para cada reporte, aplicar la función is_safe_dp que utiliza programación dinámica para determinar si es seguro.
3.	Verificación de transiciones:
    o	Dentro de is_safe_dp, construir la matriz dp para almacenar resultados intermedios y usar is_valid_transition para verificar si las transiciones entre niveles son válidas.
4.	Resultados:
    o	Contar los reportes seguros.
    o	Imprimir la seguridad (o inseguridad) de cada reporte, además del conteo total de reportes seguros.
